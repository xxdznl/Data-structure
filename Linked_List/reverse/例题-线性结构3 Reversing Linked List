#include <stdio.h>
typedef struct Node
{
	int address;
	int data;
	int next;
}node;
node list[100010];
void print(node* list, int head);
int x = 0;
int reverse(node* list, int head, int num,int flag);
int main()
{
	int head_address, sum, rev_num;
	scanf_s("%d %d %d", &head_address, &sum, &rev_num);
	int i;
	for (i = 0; i < sum; i++)
	{
		int address, data, next;
		scanf_s("%d %d %d", &address, &data, &next);
		list[address].address = address;
		list[address].data = data;
		list[address].next = next;
	}
	if (sum == 1|| rev_num==1) {
		print(list, head_address); return 0;
	}
	int count = 1;
	int head_temp = head_address;
	while (list[head_temp].next!= -1)
	{
		count++;
		head_temp = list[head_temp].next;
	}
	int times = count / rev_num;
	i = 0;
	int flag = 0;
	head_temp = head_address;
	while (i < times)
	{ 
		if (i == 0)
		{
			flag = 0;
			head_temp = reverse(list, head_temp, rev_num, flag);
		}
		else if (i != 0)
		{
			flag = 1;
			head_temp = reverse(list, x, rev_num, flag);
		}
		if (i == 0) head_address = head_temp;
		i++;
	}
	print(list, head_address);
	return 0;
}
void print(node* list, int head)
{
	while (list[head].next != -1)
	{
		printf("%05d %d %05d\n", head, list[head].data, list[head].next);
		head = list[head].next;
	}
	printf("%05d %d %d\n", head, list[head].data, list[head].next);
}
int reverse(node* list, int head, int num,int flag)//每num个反转一次
{
	int New, Cur, Pre;
	if (flag == 0)
		New = head;
	else New = list[head].next;
	Cur = list[New].next;
	Pre = list[Cur].next;
	int i = 1; int rec =New;
	for (i; i < num; i++)
	{
		list[Cur].next = New;
		New = Cur;
		Cur = Pre;
		Pre = list[Pre].next;
	}
	if(flag !=0)
	list[head].next = New;
	list[rec].next = Cur;
	head = New;
	x = rec;
	return head;
}
